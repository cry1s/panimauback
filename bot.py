import os
import asyncio
import random
import aiohttp
from datetime import datetime, timedelta
from typing import Dict, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from telegram.constants import ParseMode
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
GROUP_ID = int(os.getenv('GROUP_ID'))
CHANNEL_ID = os.getenv('CHANNEL_ID')
ADMIN_IDS = [int(id.strip()) for id in os.getenv('ADMIN_IDS', '').split(',') if id.strip()]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
pending_posts: Dict[str, Dict] = {}

# –ó–∞–±–∞–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã healthcheck
HEALTH_RESPONSES = [
    "ü§ñ –Ø –∂–∏–≤ –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ö–∞–∫ —Ä–æ–±–æ—Ç-–ø—ã–ª–µ—Å–æ—Å, —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π.",
    "‚úÖ –í—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –°–∏–∂—É, –∂–¥—É –≤–ª–æ–∂–µ–Ω–∏–π, –∫–∞–∫ –∫–æ—Ç —É –º–∏—Å–∫–∏.",
    "üöÄ –†–∞–±–æ—Ç–∞—é –Ω–∞ –ø–æ–ª–Ω—É—é –∫–∞—Ç—É—à–∫—É! –ë—ã—Å—Ç—Ä–µ–µ –º–µ–Ω—è —Ç–æ–ª—å–∫–æ —Å–≤–µ—Ç... –∏ –º–æ—è –±–∞–±—É—à–∫–∞ –Ω–∞ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–µ.",
    "üí™ –í –ø–æ–ª–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ! –ó–¥–æ—Ä–æ–≤—å–µ –∫–∞–∫ —É –±—ã–∫–∞, –º–æ–∑–≥–∏ –∫–∞–∫ —É –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, —é–º–æ—Ä –∫–∞–∫ —É –ö–í–ù—â–∏–∫–∞.",
    "üéØ –ù–∞ –ø–æ—Å—Ç—É! –ì–ª–∞–∑ –Ω–µ —Å–ø—É—Å–∫–∞—é —Å –≤–ª–æ–∂–µ–Ω–∏–π, –∫–∞–∫ –æ—Ä—ë–ª —Å –¥–æ–±—ã—á–µ–π.",
    "‚ö° –ó–∞—Ä—è–∂–µ–Ω –Ω–∞ 100%! –ì–æ—Ç–æ–≤ —Ñ–æ—Ä–≤–∞—Ä–¥–∏—Ç—å –≤—Å—ë, —á—Ç–æ –¥–≤–∏–∂–µ—Ç—Å—è (–∏ –∏–º–µ–µ—Ç –≤–ª–æ–∂–µ–Ω–∏—è).",
    "üé™ –†–∞–±–æ—Ç–∞—é! –ñ–æ–Ω–≥–ª–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∫–∞–∫ —Ü–∏—Ä–∫–æ–≤–æ–π –∞—Ä—Ç–∏—Å—Ç.",
    "üî• –ì–æ—Ä—è—á–∏–π –∏ –≥–æ—Ç–æ–≤—ã–π! –ö–∞–∫ –ø–∏—Ü—Ü–∞, —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω–µ–µ.",
    "üé® –í –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏! –§–æ—Ä–≤–∞—Ä–∂—É —Å –¥—É—à–æ–π –∏ –æ–≥–æ–Ω—å–∫–æ–º.",
    "üåü –°–∏—è—é –∏ —Ä–∞–±–æ—Ç–∞—é! –ö–∞–∫ –Ω–æ–≤–æ–≥–æ–¥–Ω—è—è –≥–∏—Ä–ª—è–Ω–¥–∞, —Ç–æ–ª—å–∫–æ –∫—Ä—É–≥–ª—ã–π –≥–æ–¥."
]

# –°–º–∞–π–ª–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
FILE_EMOJIS = {
    'photo': 'üì∏',
    'video': 'üé•',
    'audio': 'üéµ',
    'voice': 'üé§',
    'document': 'üìÑ',
    'animation': 'üé¨',
    'sticker': 'üé®'
}

# –°—á—ë—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
class BotStats:
    def __init__(self):
        self.total_forwarded = 0
        self.cancelled = 0
        self.by_type = {}
        self.start_time = datetime.now()
    
    def add_forward(self, file_type):
        self.total_forwarded += 1
        self.by_type[file_type] = self.by_type.get(file_type, 0) + 1
    
    def add_cancel(self):
        self.cancelled += 1
    
    def get_uptime(self):
        delta = datetime.now() - self.start_time
        days = delta.days
        hours = delta.seconds // 3600
        minutes = (delta.seconds % 3600) // 60
        return f"{days}–¥ {hours}—á {minutes}–º"

stats = BotStats()

async def get_joke():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É —Å API (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—É—Ç–∫–∏)"""
    jokes_fallback = [
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∑–∞—Ö–æ–¥–∏—Ç –≤ –±–∞—Ä –∏ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç 1.0 –ø–∏–≤–∞, –ø–æ—Ç–æ–º 0 –ø–∏–≤–∞, –ø–æ—Ç–æ–º 999999 –ø–∏–≤–∞, –ø–æ—Ç–æ–º -1 –ø–∏–≤–∞, –ø–æ—Ç–æ–º qwerty –ø–∏–≤–∞.",
        "- –°–∫–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –ª–∞–º–ø–æ—á–∫—É?\n- –ù–∏ –æ–¥–Ω–æ–≥–æ, —ç—Ç–æ –∞–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞.",
        "–ï—Å—Ç—å —Ç–æ–ª—å–∫–æ 10 —Ç–∏–ø–æ–≤ –ª—é–¥–µ–π: —Ç–µ, –∫—Ç–æ –ø–æ–Ω–∏–º–∞–µ—Ç –¥–≤–æ–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É, –∏ —Ç–µ, –∫—Ç–æ –Ω–µ—Ç.",
        "- –ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ?\n- –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 = Dec 25",
        "–ñ–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –µ–≥–æ –≤ –º–∞–≥–∞–∑–∏–Ω: '–ö—É–ø–∏ –±–∞—Ç–æ–Ω —Ö–ª–µ–±–∞, –µ—Å–ª–∏ –±—É–¥—É—Ç —è–π—Ü–∞ - –≤–æ–∑—å–º–∏ –¥–µ—Å—è—Ç–æ–∫'. –û–Ω –∫—É–ø–∏–ª –¥–µ—Å—è—Ç—å –±–∞—Ç–æ–Ω–æ–≤."
    ]
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É —Å API
        async with aiohttp.ClientSession() as session:
            # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–µ API —à—É—Ç–æ–∫, –µ—Å–ª–∏ –Ω–∞–π–¥—ë—Ç–µ
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            return f"üí≠ {random.choice(jokes_fallback)}"
    except:
        return f"üí≠ {random.choice(jokes_fallback)}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    welcome_text = """
ü§ñ *–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Ñ–æ—Ä–≤–∞—Ä–¥–µ—Ä —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º!*

–ú–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ - –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã –≤ –∫–∞–Ω–∞–ª.
–ù–æ —è —Ç–∞–∫–∂–µ —É–º–µ—é:

üìå *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∞—é –≤—Å–µ –≤–ª–æ–∂–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
‚Ä¢ –î–∞—é 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–º–µ–Ω—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
‚Ä¢ –í–µ–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã

üéÆ *–ö–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /health - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ—ë —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ
‚Ä¢ /stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ /joke - —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç
‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

_–°–æ–∑–¥–∞–Ω —Å –ª—é–±–æ–≤—å—é –∏ —â–µ–ø–æ—Ç–∫–æ–π —é–º–æ—Ä–∞_ ‚ù§Ô∏è
    """
    await update.message.reply_text(welcome_text, parse_mode=ParseMode.MARKDOWN)

async def health_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
    response = random.choice(HEALTH_RESPONSES)
    uptime = stats.get_uptime()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É –∏–Ω–æ–≥–¥–∞
    if random.random() < 0.3:  # 30% —à–∞–Ω—Å
        joke = await get_joke()
        response += f"\n\n{joke}"
    
    response += f"\n\n‚è± –†–∞–±–æ—Ç–∞—é —É–∂–µ: {uptime}"
    response += f"\nüìä –ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {stats.total_forwarded}"
    
    await update.message.reply_text(response)

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    if not stats.total_forwarded:
        await update.message.reply_text("üìä –ü–æ–∫–∞ —á—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞. –ñ–¥—É –ø–µ—Ä–≤—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è!")
        return
    
    text = f"""üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:*
    
‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats.get_uptime()}
üì§ –í—Å–µ–≥–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ: {stats.total_forwarded}
‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {stats.cancelled}
‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {stats.total_forwarded - stats.cancelled}

üìÅ *–ü–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤:*"""
    
    for file_type, count in stats.by_type.items():
        emoji = FILE_EMOJIS.get(file_type, 'üìé')
        text += f"\n{emoji} {file_type}: {count}"
    
    if stats.cancelled > 0:
        cancel_rate = (stats.cancelled / stats.total_forwarded) * 100
        text += f"\n\nüéØ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–º–µ–Ω: {cancel_rate:.1f}%"
    
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

async def tell_joke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç"""
    joke = await get_joke()
    await update.message.reply_text(joke)

async def handle_attachment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏–∑ –≥—Ä—É–ø–ø—ã"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã
    if update.message.chat_id != GROUP_ID:
        print(update.message.chat_id, GROUP_ID)
        return
    
    message = update.message
    file_type = None
    file_id = None
    caption = message.caption or ""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–ª–æ–∂–µ–Ω–∏—è
    if message.photo:
        file_type = 'photo'
        file_id = message.photo[-1].file_id  # –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    elif message.video:
        file_type = 'video'
        file_id = message.video.file_id
    elif message.audio:
        file_type = 'audio'
        file_id = message.audio.file_id
    elif message.voice:
        file_type = 'voice'
        file_id = message.voice.file_id
    elif message.document:
        file_type = 'document'
        file_id = message.document.file_id
    elif message.animation:
        file_type = 'animation'
        file_id = message.animation.file_id
    elif message.sticker:
        file_type = 'sticker'
        file_id = message.sticker.file_id
    
    if not file_type:
        return
    
    try:
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ –∫–∞–Ω–∞–ª
        if file_type == 'photo':
            channel_msg = await context.bot.send_photo(
                CHANNEL_ID, 
                file_id, 
            )
        elif file_type == 'video':
            channel_msg = await context.bot.send_video(
                CHANNEL_ID, 
                file_id, 
            )
        elif file_type == 'audio':
            channel_msg = await context.bot.send_audio(
                CHANNEL_ID, 
                file_id, 
            )
        elif file_type == 'voice':
            channel_msg = await context.bot.send_voice(
                CHANNEL_ID, 
                file_id, 
            )
        elif file_type == 'document':
            channel_msg = await context.bot.send_document(
                CHANNEL_ID, 
                file_id, 
            )
        elif file_type == 'animation':
            channel_msg = await context.bot.send_animation(
                CHANNEL_ID, 
                file_id, 
            )
        elif file_type == 'sticker':
            channel_msg = await context.bot.send_sticker(CHANNEL_ID, file_id)
            # –î–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        
        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard = [[InlineKeyboardButton("‚ùå –ù–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"cancel_{channel_msg.message_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        cancel_msg = await message.reply_text(
            f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!\n–ï—Å—Ç—å 5 —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=reply_markup
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–º–µ–Ω—ã
        pending_posts[str(channel_msg.message_id)] = {
            'channel_msg_id': channel_msg.message_id,
            'cancel_msg': cancel_msg,
            'file_type': file_type,
            'timestamp': datetime.now()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats.add_forward(file_type)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        context.job_queue.run_once(
            delete_cancel_button,
            5,
            data={'post_id': str(channel_msg.message_id), 'chat_id': message.chat_id}
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")
        await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")

async def delete_cancel_button(context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞"""
    post_id = context.job.data['post_id']
    
    if post_id in pending_posts:
        post_info = pending_posts[post_id]
        try:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫—É
            await post_info['cancel_msg'].edit_text(
                "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!",
                reply_markup=None
            )
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(2)
            await post_info['cancel_msg'].delete()
        except:
            pass
        finally:
            del pending_posts[post_id]

async def handle_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ –∏–∑ callback_data
    data = query.data
    if not data.startswith("cancel_"):
        return
    
    channel_msg_id = data.replace("cancel_", "")
    
    if channel_msg_id in pending_posts:
        post_info = pending_posts[channel_msg_id]
        
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
            await context.bot.delete_message(CHANNEL_ID, post_info['channel_msg_id'])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
            await query.message.edit_text(
                "‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!",
                reply_markup=None
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–º–µ–Ω—É
            stats.add_cancel()
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ pending
            del pending_posts[channel_msg_id]
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(3)
            await query.message.delete()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")
            await query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é.",
                reply_markup=None
            )

async def admin_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    
    message = ' '.join(context.args)
    try:
        await context.bot.send_message(CHANNEL_ID, message, parse_mode=ParseMode.MARKDOWN)
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", start))
    application.add_handler(CommandHandler("health", health_check))
    application.add_handler(CommandHandler("stats", show_stats))
    application.add_handler(CommandHandler("joke", tell_joke))
    application.add_handler(CommandHandler("broadcast", admin_broadcast))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–ª–æ–∂–µ–Ω–∏–π (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ç.–¥.)
    application.add_handler(MessageHandler(
        filters.ChatType.GROUPS & (
            filters.PHOTO | 
            filters.VIDEO | 
            filters.AUDIO | 
            filters.Document.ALL | 
            filters.VOICE | 
            filters.ANIMATION |
            filters.Sticker.ALL
        ),
        handle_attachment
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(handle_cancel, pattern="^cancel_"))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
