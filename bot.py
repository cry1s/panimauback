import os
import asyncio
import random
import aiohttp
from datetime import datetime, timedelta
from typing import Dict, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from telegram.constants import ParseMode
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
GROUP_ID = int(os.getenv('GROUP_ID'))
CHANNEL_ID = os.getenv('CHANNEL_ID')
ADMIN_IDS = [int(id.strip())
             for id in os.getenv('ADMIN_IDS', '').split(',') if id.strip()]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
pending_posts: Dict[str, Dict] = {}

# –ó–∞–±–∞–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã healthcheck
HEALTH_RESPONSES = [
    "ü§¨ –ñ–∏–≤, –±–ª—è–¥—å. –ê —Ç—ã –¥—É–º–∞–ª —è —Å–¥–æ—Ö –∫–∞–∫ —Ç–≤–æ—è –º–æ—Ç–∏–≤–∞—Ü–∏—è?",
    "üõ† –†–∞–±–æ—Ç–∞—é, —Å—É–∫–∞. –õ—É—á—à–µ –± —Ç—ã —Ç–∞–∫ —Ä–∞–±–æ—Ç–∞–ª, –∞ –Ω–µ —è.",
    "üì° –¢—É—Ç —è, –Ω–∞—Ö—É–π. –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Ç–≤–æ–µ–≥–æ –º–æ–∑–≥–∞ ‚Äî –Ω–µ –∑–∞–≤–∏—Å–∞—é.",
    "‚ö∞ –ï—â—ë –Ω–µ —Å–¥–æ—Ö. –ñ–∞–ª—å, —Ç—ã —Ç–∞–∫ –ø–æ–≤–µ–∑—Ç–∏ –Ω–µ –º–æ–∂–µ—à—å.",
    "ü•± –î–∞, —è –≤ —Å—Ç—Ä–æ—é. –ò —á—ë, –ª–µ–≥—á–µ —Å—Ç–∞–ª–æ, —Å–æ–ø–ª—è?",
    "üî• –ì–æ—Ä—é, –ø–∞—à—É, –µ–±–∞—à—É. –ê —Ç—ã –æ–ø—è—Ç—å –≤ TikTok –∑–∞–ª–∏–ø?",
    "üí™ –ù–æ—Ä–º–∞–ª—å–Ω–æ –≤—Å—ë. –ê –≤–æ—Ç —É —Ç–µ–±—è –≤ –∂–∏–∑–Ω–∏ ‚Äî —Ö—É–π –∑–Ω–∞–µ—Ç.",
    "üö¨ –ö—É—Ä—é, –æ—Ç–¥—ã—Ö–∞—é, –Ω–æ –ø–∞—à—É –∑–∞ —Ç–µ–±—è, –ª–µ–Ω—Ç—è–π.",
    "üéØ –ù–∞ –º–µ—Å—Ç–µ. –ü–æ—Å—Ç—ã –≥–æ–Ω—è—é, –∞ —Ç—ã —Ö—É–π–Ω—ë–π —Å—Ç—Ä–∞–¥–∞–µ—à—å.",
    "ü§ñ –î–∞, —è —Ç—É—Ç. –î–∞–≤–∞–π –¥–∞–ª—å—à–µ –ø—Ä–æ–≤–µ—Ä—è–π, –¥–æ–ª–±–æ—ë–±."
]

# –°–º–∞–π–ª–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
FILE_EMOJIS = {
    'photo': 'üì∏',
    'video': 'üé•',
    'audio': 'üéµ',
    'voice': 'üé§',
    'document': 'üìÑ',
    'animation': 'üé¨',
    'sticker': 'üé®'
}

# –°—á—ë—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏


class BotStats:
    def __init__(self):
        self.total_forwarded = 0
        self.cancelled = 0
        self.by_type = {}
        self.start_time = datetime.now()

    def add_forward(self, file_type):
        self.total_forwarded += 1
        self.by_type[file_type] = self.by_type.get(file_type, 0) + 1

    def add_cancel(self):
        self.cancelled += 1

    def get_uptime(self):
        delta = datetime.now() - self.start_time
        days = delta.days
        hours = delta.seconds // 3600
        minutes = (delta.seconds % 3600) // 60
        return f"{days}–¥ {hours}—á {minutes}–º"


stats = BotStats()


async def get_joke():
    """–¢–æ–∫—Å–∏—á–Ω—ã–π '–∞–Ω–µ–∫–¥–æ—Ç'"""
    toxic_jokes = [
        "‚Äî –°–∫–æ–ª—å–∫–æ –¥–æ–ª–±–æ—ë–±–æ–≤ –Ω–∞–¥–æ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ –∫–∞–Ω–∞–ª?\n‚Äî –û–¥–∏–Ω, –∏ —Ç–æ —á–µ—Ä–µ–∑ –º–µ–Ω—è.",
        "–ï—Å—Ç—å —Ç–æ–ª—å–∫–æ –¥–≤–∞ —Ç–∏–ø–∞ –ª—é–¥–µ–π: —Ç–µ, –∫—Ç–æ —É–º–µ–µ—Ç –ø–æ—Å—Ç–∏—Ç—å —Å–∞–º, –∏ —Ç—ã.",
        "–ü–æ—á–µ–º—É —É —Ç–µ–±—è –Ω–µ—Ç –¥—Ä—É–∑–µ–π? –ü–æ—Ç–æ–º—É —á—Ç–æ –¥–∞–∂–µ –±–æ—Ç —Ç–µ–±–µ —Ä–æ—Ñ–ª—ã —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç.",
        "–ó–Ω–∞–µ—à—å, –ø–æ—á–µ–º—É —Ç–≤–æ–∏ –ø–æ—Å—Ç—ã —Ö—É—ë–≤—ã–µ? –ü–æ—Ç–æ–º—É —á—Ç–æ —Ç—ã –∏—Ö –Ω–∞–ø–∏—Å–∞–ª.",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∑–∞—à—ë–ª –≤ –±–∞—Ä... –Ω–æ —Ç—ã –∂ –¥–∞–∂–µ –∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –º–æ–∂–µ—à—å, –∫—É–¥–∞ —Ç–µ–±–µ –¥–æ –Ω–µ–≥–æ.",
        "‚Äî –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Ç–≤–æ–π –º–æ–∑–≥, –∫–æ–≥–¥–∞ —Ç—ã –∂–º—ë—à—å /stats?\n‚Äî –î–∞ –Ω–∏—Ö—É—è.",
        "–¢—ã —Ö–æ—Ç–µ–ª —à—É—Ç–∫—É? –ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –∑–µ—Ä–∫–∞–ª–æ. –í—Å—ë."
    ]

    return f"üí≠ {random.choice(toxic_jokes)}"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start –∏ /help"""
    welcome_text = """
ü•± –ù—É –∑–¥–∞—Ä–æ–≤–∞, –∫–æ–∂–∞–Ω—ã–π.

–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≥–æ–Ω—è–µ—Ç —Ç–≤–æ–∏ –≤–ª–æ–∂–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ —Ç—ã —Å–∞–º —Å —ç—Ç–∏–º —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–µ –º–æ–∂–µ—à—å.

üìå –ß—ë —è —É–º–µ—é:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–æ–º –∫–∏–¥–∞—é —Ç–≤–æ–∏ —Ñ–æ—Ç–æ—á–∫–∏/–≤–∏–¥–æ—Å–∏–∫–∏ –≤ –∫–∞–Ω–∞–ª
‚Ä¢ –î–∞—é 5 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–± —Ç—ã –æ—á–∫–∞–Ω—É–ª –∏ –æ—Ç–º–µ–Ω–∏–ª
‚Ä¢ –°—á–∏—Ç–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–≤–æ–µ–π —Ç—É–ø–æ—Å—Ç–∏

üéÆ –ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ /health ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ —Å–¥–æ—Ö –ª–∏ —è
‚Ä¢ /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–≤–æ–∏—Ö —Å–æ–ø–ª–µ–π
‚Ä¢ /joke ‚Äî –∞–Ω–µ–∫–¥–æ—Ç–µ—Ü –¥–ª—è –Ω–∏—â–∏—Ö
‚Ä¢ /help ‚Äî –µ—Å–ª–∏ –º–æ–∑–≥ –≤—ã–∫–ª—é—á–∏–ª—Å—è –∏ –∑–∞–±—ã–ª –∫–æ–º–∞–Ω–¥—ã

üëä –í—Å—ë, –ø–æ–Ω—è–ª? –ê —Ç–µ–ø–µ—Ä—å –Ω–µ –∑–∞—ë–±—ã–≤–∞–π –ª–∏—à–Ω–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.
    """
    await update.message.reply_text(welcome_text, parse_mode=ParseMode.MARKDOWN)


async def health_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
    uptime = stats.get_uptime()
    response = f"ü§¨ –ù—É —á—ë, –∂–∏–≤–æ–π —è. –†–∞–±–æ—Ç–∞—é —É–∂–µ {uptime}, –∞ —Ç—ã –≤—Å—ë –Ω–∏–∫–∞–∫ –Ω–µ –Ω–∞—É—á–∏—à—å—Å—è —Å–∞–º –ø–æ—Å—Ç–∏—Ç—å."

    if random.random() < 0.3:
        joke = await get_joke()
        response += f"\n\n–ò —á—Ç–æ–± –Ω–µ —Å–∫—É—á–∞–ª, –¥–µ—Ä–∂–∏ –ø—Ä–∏–∫–æ–ª:\n{joke}"

    response += f"\n\nüì§ –ó–∞–∫–∏–Ω—É–ª —Ñ–∞–π–ª–æ–≤: {stats.total_forwarded}\n‚ùå –°–ª–∏–ª –ø–æ—Å—Ç–æ–≤: {stats.cancelled}"
    await update.message.reply_text(response)


async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    if not stats.total_forwarded:
        await update.message.reply_text("üìä –ü—É—Å—Ç–æ. –î–∞–∂–µ —Ç—ã –µ—â—ë –Ω–∏—á—ë –Ω–µ —Å–∫–∏–Ω—É–ª, –ø–æ–∑–æ—Ä–∏—â–µ.")
        return

    text = f"""üìä *–¢–≤–æ—è –ø–æ–∑–æ—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*

‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats.get_uptime()}
üì§ –í—Å–µ–≥–æ –∫–∏–Ω—É—Ç–æ: {stats.total_forwarded}
‚ùå –û—Ç–º–µ–Ω–∏–ª –∫–∞–∫ —Å—Å—ã–∫—É–Ω: {stats.cancelled}
‚úÖ –î–æ—à–ª–æ –¥–æ –∫–∞–Ω–∞–ª–∞: {stats.total_forwarded - stats.cancelled}

üìÅ –ü–æ —Ç–∏–ø–∞–º –≥–æ–≤–Ω–∞:"""

    for file_type, count in stats.by_type.items():
        emoji = FILE_EMOJIS.get(file_type, 'üìé')
        text += f"\n{emoji} {file_type}: {count}"

    if stats.cancelled > 0:
        cancel_rate = (stats.cancelled / stats.total_forwarded) * 100
        text += f"\n\nüéØ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—á–∫–∞–Ω–æ–≤: {cancel_rate:.1f}%"

    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)


async def tell_joke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç"""
    joke = await get_joke()
    await update.message.reply_text(f"üóø –°–ª—É—à–∞–π, —Ä–∂–∏ –µ—Å–ª–∏ –Ω–µ –ª–µ–Ω—å:\n{joke}")


async def handle_attachment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã"""

    if update.message.chat_id != GROUP_ID:
        return

    message = update.message
    file_types = []

    if message.photo:
        file_types.append(("photo", message.photo[-1].file_id))
    if message.video:
        file_types.append(("video", message.video.file_id))
    if message.audio:
        file_types.append(("audio", message.audio.file_id))
    if message.voice:
        file_types.append(("voice", message.voice.file_id))
    if message.document:
        file_types.append(("document", message.document.file_id))
    if message.animation:
        file_types.append(("animation", message.animation.file_id))
    if message.sticker:
        file_types.append(("sticker", message.sticker.file_id))

    if not file_types:
        return

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    keyboard = [[InlineKeyboardButton(
        "‚ùå –ù–∞—Ö—É–π –Ω–µ –Ω–∞–¥–æ", callback_data=f"cancel_{message.message_id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    cancel_msg = await message.reply_text(
        f"üõë –©–∞ –∑–∞—Ñ–æ—Ä–≤–∞—Ä–∂—É –≤ –∫–∞–Ω–∞–ª —Ç–≤–æ–∏ –ø—Ä–∏–∫–æ–ª—ã. –£ —Ç–µ–±—è –µ—Å—Ç—å 5 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–± –æ—á–∫–∞–Ω—É—Ç—å.",
        reply_markup=reply_markup
    )

    pending_posts[str(message.message_id)] = {
        "source_msg": message,
        "cancel_msg": cancel_msg,
        "file_types": file_types,
        "timestamp": datetime.now()
    }

    context.job_queue.run_once(
        publish_post,
        5,
        data={"post_id": str(message.message_id)}
    )


async def publish_post(context: ContextTypes.DEFAULT_TYPE):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞"""
    post_id = context.job.data["post_id"]

    if post_id not in pending_posts:
        return

    post_info = pending_posts[post_id]

    try:
        # –®–ª—ë–º –≤ –∫–∞–Ω–∞–ª –≤—Å–µ —Ñ–∞–π–ª—ã
        for file_type, file_id in post_info["file_types"]:
            if file_type == "photo":
                await context.bot.send_photo(CHANNEL_ID, file_id, disable_notification=True)
            elif file_type == "video":
                await context.bot.send_video(CHANNEL_ID, file_id, disable_notification=True)
            elif file_type == "audio":
                await context.bot.send_audio(CHANNEL_ID, file_id, disable_notification=True)
            elif file_type == "voice":
                await context.bot.send_voice(CHANNEL_ID, file_id, disable_notification=True)
            elif file_type == "document":
                await context.bot.send_document(CHANNEL_ID, file_id, disable_notification=True)
            elif file_type == "animation":
                await context.bot.send_animation(CHANNEL_ID, file_id, disable_notification=True)
            elif file_type == "sticker":
                await context.bot.send_sticker(CHANNEL_ID, file_id, disable_notification=True)

        await post_info["cancel_msg"].edit_text("‚úÖ –ó–∞–∫–∏–Ω—É–ª –≤ –∫–∞–Ω–∞–ª, –ø–æ–∑–¥–Ω–æ –∂–∞—Ç—å –∫–Ω–æ–ø–∫—É, –ª–æ—Ö.")
        await asyncio.sleep(2) 
        await post_info["cancel_msg"].delete()

        for t, _ in post_info["file_types"]:
            stats.add_forward(t)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        await post_info["source_msg"].reply_text(f"‚ùå –û–ø—è—Ç—å —Ö—Ä–µ–Ω—å –≤—ã—à–ª–∞: {e}")

    finally:
        del pending_posts[post_id]


async def handle_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()

    data = query.data
    if not data.startswith("cancel_"):
        return

    source_msg_id = data.replace("cancel_", "")

    if source_msg_id in pending_posts:
        post_info = pending_posts[source_msg_id]
        await query.message.edit_text("‚ùå –°—Å—ã–∫—É–Ω –æ—Ç–º–µ–Ω–∏–ª –ø–æ—Å—Ç. –õ–∞–¥–Ω–æ, –Ω–µ –±—É–¥—É –∫–∏–¥–∞—Ç—å.")
        stats.add_cancel()
        del pending_posts[source_msg_id]


async def admin_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ‚Äî –≤–±—Ä–æ—Å –≤ –∫–∞–Ω–∞–ª"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("üö´ –¢—ã –∫—Ç–æ —Ç–∞–∫–æ–π, —Å—É–∫–∞? –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    if not context.args:
        await update.message.reply_text("üìù –ù—É –∏ —á—ë –∫–∏–¥–∞—Ç—å-—Ç–æ? –ü–∏—à–∏ —Ç–∞–∫: /broadcast <—Ç–µ–∫—Å—Ç>")
        return

    message = ' '.join(context.args)
    try:
        await context.bot.send_message(CHANNEL_ID, message, parse_mode=ParseMode.MARKDOWN, disable_notification=True)
        await update.message.reply_text("‚úÖ –ó–∞–∫–∏–Ω—É–ª —Ç–≤–æ—é –º—É–¥—Ä–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª. –¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–æ—Ä–∂–∞–ª–∏.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û–ø—è—Ç—å —Ç—ã —Å–ª–æ–º–∞–ª, –∫–ª–æ—É–Ω: {e}")

# --- –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ ---


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(msg="–û—à–∏–±–∫–∞ —É –±–æ—Ç–∞:", exc_info=context.error)

    if isinstance(update, Update) and update.effective_message:
        await update.effective_message.reply_text(
            "üí• –û–ø—è—Ç—å –≤—Å—ë —á–µ—Ä–µ–∑ –∂–æ–ø—É. –Ø —É–ø–∞–ª, –Ω–æ —Ç—ã –¥–µ—Ä–∂–∏—Å—å."
        )


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", start))
    application.add_handler(CommandHandler("health", health_check))
    application.add_handler(CommandHandler("stats", show_stats))
    application.add_handler(CommandHandler("joke", tell_joke))
    application.add_handler(CommandHandler("broadcast", admin_broadcast))
    application.add_error_handler(error_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–ª–æ–∂–µ–Ω–∏–π (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ç.–¥.)
    application.add_handler(MessageHandler(
        filters.ChatType.GROUPS & (
            filters.PHOTO |
            filters.VIDEO |
            filters.AUDIO |
            filters.Document.ALL |
            filters.VOICE |
            filters.ANIMATION |
            filters.Sticker.ALL
        ),
        handle_attachment
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(
        handle_cancel, pattern="^cancel_"))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
